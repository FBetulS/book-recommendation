import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import plotly.express as px

# Modelleri ve veriyi yÃ¼kle
@st.cache_data
def load_data():
    try:
        # Kitap verilerini yÃ¼kle
        data = pd.read_csv("books_data.csv", encoding='latin-1', on_bad_lines='skip')
        
        # PopÃ¼ler kitaplarÄ± yÃ¼kle
        popular_books = pd.read_csv("popular_books.csv")
        
        # Benzerlik modelini yÃ¼kle
        with open("model.pkl", "rb") as file:
            cosine_sim = pickle.load(file)
        
        # Book content sÃ¼tunu oluÅŸtur
        data['book_content'] = data['title'] + ' ' + data['authors']
        
        return data, popular_books, cosine_sim
    except Exception as e:
        st.error(f"Veri yÃ¼klenirken hata oluÅŸtu: {e}")
        return None, None, None

def recommend_books(book_title, data, cosine_sim):
    try:
        idx = data[data['title'] == book_title].index[0]
        sim_scores = list(enumerate(cosine_sim[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:11]
        book_indices = [i[0] for i in sim_scores]
        return data.iloc[book_indices][['title', 'authors', 'average_rating']]
    except Exception as e:
        st.error(f"Ã–neri oluÅŸturulurken hata: {e}")
        return None

def main():
    st.set_page_config(page_title="ğŸ“š Kitap Ã–neri Sistemi", page_icon="ğŸ“–")
    
    # Veriyi ve modelleri yÃ¼kle
    data, popular_books, cosine_sim = load_data()
    if data is None:
        return
    
    # Sayfa baÅŸlÄ±ÄŸÄ± ve aÃ§Ä±klama
    st.title("ğŸ“š Kitap Ã–neri Sistemi")
    st.write("KiÅŸiselleÅŸtirilmiÅŸ kitap Ã¶nerileri iÃ§in aÅŸaÄŸÄ±daki seÃ§enekleri kullanabilirsiniz.")
    
    # Yan menÃ¼
    menu = st.sidebar.radio("Ã–neri TÃ¼rÃ¼nÃ¼ SeÃ§in", 
        ["PopÃ¼ler Kitaplar", "Ä°Ã§erik TabanlÄ± Ã–neri"])
    
    if menu == "PopÃ¼ler Kitaplar":
        st.subheader("ğŸ”¥ En PopÃ¼ler Kitaplar")
        st.dataframe(popular_books)
    
    else:
        st.subheader("ğŸ“– Benzer Kitap Ã–nerisi")
        
        # KullanÄ±cÄ±dan kitap seÃ§imi
        book_titles = sorted(data['title'].unique())
        selected_book = st.selectbox("Bir kitap seÃ§in:", book_titles)
        
        if st.button("Kitap Ã–nerilerini GÃ¶ster"):
            recommendations = recommend_books(selected_book, data, cosine_sim)
            if recommendations is not None:
                st.write(f"'{selected_book}' kitabÄ± iÃ§in Ã¶neriler:")
                st.dataframe(recommendations)
    
    # GÃ¶rselleÅŸtirmeler
    st.sidebar.header("ğŸ“Š Veri GÃ¶rselleÅŸtirmeleri")
    
    if st.sidebar.checkbox("Ortalama DeÄŸerlendirme DaÄŸÄ±lÄ±mÄ±"):
        fig = px.histogram(data, x='average_rating', 
                           nbins=30, 
                           title='Ortalama DeÄŸerlendirme DaÄŸÄ±lÄ±mÄ±')
        fig.update_xaxes(title_text='Ortalama DeÄŸerlendirme')
        fig.update_yaxes(title_text='SÄ±klÄ±k')
        st.plotly_chart(fig)
    
    if st.sidebar.checkbox("En Ã‡ok Kitap Yazan Yazarlar"):
        top_authors = data['authors'].value_counts().head(10)
        fig = px.bar(top_authors, x=top_authors.values, y=top_authors.index, 
                     orientation='h',
                     labels={'x': 'Kitap SayÄ±sÄ±', 'y': 'Yazar'},
                     title='Yazara GÃ¶re Kitap SayÄ±sÄ±')
        st.plotly_chart(fig)

if __name__ == "__main__":
    main()
    